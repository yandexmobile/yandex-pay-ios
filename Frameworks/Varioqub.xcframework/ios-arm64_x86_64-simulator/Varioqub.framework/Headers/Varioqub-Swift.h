#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef VARIOQUB_SWIFT_H
#define VARIOQUB_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Varioqub",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;

@interface NSError (SWIFT_EXTENSION(Varioqub))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CONFIG_FETCH_DOMAIN;)
+ (NSString * _Nonnull)CONFIG_FETCH_DOMAIN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_OTHER_CODE;)
+ (NSInteger)CONFIG_FETCH_OTHER_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_EMPTY_RESULT_CODE;)
+ (NSInteger)CONFIG_FETCH_EMPTY_RESULT_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_NULL_IDENTIFIER_CODE;)
+ (NSInteger)CONFIG_FETCH_NULL_IDENTIFIER_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_RESPONSE_ERROR_CODE;)
+ (NSInteger)CONFIG_FETCH_RESPONSE_ERROR_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_NETWORK_ERROR_CODE;)
+ (NSInteger)CONFIG_FETCH_NETWORK_ERROR_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_PARSE_ERROR_CODE;)
+ (NSInteger)CONFIG_FETCH_PARSE_ERROR_CODE SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC8Varioqub19VQActivateEventData")
@interface VQActivateEventData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8Varioqub16VQClientFeatures")
@interface VQClientFeatures : NSObject <NSCopying, NSMutableCopying>
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull features;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)clientFeaturesWith:(NSDictionary<NSString *, NSString *> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
@protocol VQSettingsProtocol;

SWIFT_CLASS("_TtC8Varioqub8VQConfig")
@interface VQConfig : NSObject
@property (nonatomic, copy) NSURL * _Nullable baseURL;
@property (nonatomic, strong) id <VQSettingsProtocol> _Nullable settings;
@property (nonatomic) NSTimeInterval fetchThrottle;
@property (nonatomic, strong) VQClientFeatures * _Nullable initialClientFeatures;
@property (nonatomic, strong) dispatch_queue_t _Nullable varioqubQueue;
@property (nonatomic, strong) dispatch_queue_t _Nonnull outputQueue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VQConfig * _Nonnull defaultConfig;)
+ (VQConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
@end


enum VQSource : NSInteger;
@class NSNumber;

SWIFT_CLASS("_TtC8Varioqub13VQConfigValue")
@interface VQConfigValue : NSObject
@property (nonatomic, readonly) enum VQSource source;
@property (nonatomic, readonly) int64_t testID;
@property (nonatomic, readonly, copy) NSString * _Nullable value;
@property (nonatomic, readonly, strong) NSNumber * _Nullable numberValue;
@property (nonatomic, readonly, copy) NSString * _Nullable stringValueOrDefault;
@property (nonatomic, readonly) NSInteger intValueOrDefault;
@property (nonatomic, readonly) NSInteger int64ValueOrDefault;
@property (nonatomic, readonly) BOOL boolValueOrDefault;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VQFetchStatus, open) {
  VQFetchStatusSuccess = 0,
  VQFetchStatusThrottled = 1,
  VQFetchStatusCached = 2,
  VQFetchStatusError = 3,
};


SWIFT_PROTOCOL("_TtP8Varioqub14VQNameProvider_")
@protocol VQNameProvider <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull varioqubName;
@end


SWIFT_PROTOCOL("_TtP8Varioqub12VQIdProvider_")
@protocol VQIdProvider <VQNameProvider>
- (void)fetchIdentifiersWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))completion;
@end

typedef SWIFT_ENUM(NSInteger, VQLogLevel, open) {
  VQLogLevelError = 0,
  VQLogLevelWarning = 1,
  VQLogLevelInfo = 2,
  VQLogLevelDebug = 3,
  VQLogLevelTrace = 4,
};


SWIFT_PROTOCOL("_TtP8Varioqub19VQLoggerDestination_")
@protocol VQLoggerDestination <NSObject>
- (BOOL)isAcceptedWithModule:(NSString * _Nonnull)module_ level:(enum VQLogLevel)level SWIFT_WARN_UNUSED_RESULT;
- (void)logWithModule:(NSString * _Nonnull)module_ level:(enum VQLogLevel)level message:(NSString * _Nonnull)message;
- (void)logWithModule:(NSString * _Nonnull)module_ level:(enum VQLogLevel)level error:(NSError * _Nonnull)error;
@end


SWIFT_CLASS("_TtC8Varioqub15VQLoggerFactory")
@interface VQLoggerFactory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Varioqub23VQMutableClientFeatures")
@interface VQMutableClientFeatures : VQClientFeatures
- (void)setFeature:(NSString * _Nonnull)feature forKey:(NSString * _Nonnull)key;
- (void)removeFeatureForKey:(NSString * _Nonnull)key;
- (void)mergeWith:(NSDictionary<NSString *, NSString *> * _Nonnull)other;
- (void)clearFeatures;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
@end


@class VQTestIDSet;

SWIFT_PROTOCOL("_TtP8Varioqub10VQReporter_")
@protocol VQReporter <VQNameProvider>
@optional
- (void)setExperiments:(NSString * _Nonnull)experiments;
- (void)setTriggeredTestIds:(VQTestIDSet * _Nonnull)testIds;
- (void)sendActivateEvent:(VQActivateEventData * _Nonnull)eventData;
@end

@class NSDate;
@class NSData;

SWIFT_PROTOCOL("_TtP8Varioqub18VQSettingsProtocol_")
@protocol VQSettingsProtocol <NSObject>
@property (nonatomic, copy) NSDate * _Nullable lastFetchDate;
@property (nonatomic) BOOL isShouldNotifyExperimentChanged;
@property (nonatomic, copy) NSString * _Nullable lastEtag;
@property (nonatomic, copy) NSData * _Nullable reporterData;
- (void)storeNetworkData:(NSData * _Nullable)data for:(NSString * _Nonnull)key;
- (NSData * _Nullable)loadNetworkDataFor:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, VQSource, open) {
  VQSourceDefaultValue = 0,
  VQSourceInappConfig = 1,
  VQSourceServer = 2,
};


SWIFT_CLASS("_TtC8Varioqub11VQTestIDSet")
@interface VQTestIDSet : NSObject
- (nonnull instancetype)initWithSet:(NSSet<NSNumber *> * _Nonnull)set OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithArray:(NSArray<NSNumber *> * _Nonnull)array OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull set;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC8Varioqub15VQTransferValue")
@interface VQTransferValue : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable value;
@property (nonatomic, readonly) int64_t testId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8Varioqub16VQVarioqubFacade")
@interface VQVarioqubFacade : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VQVarioqubFacade * _Nonnull sharedVarioqub;)
+ (VQVarioqubFacade * _Nonnull)sharedVarioqub SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
- (void)initializeWithClientId:(NSString * _Nonnull)clientId config:(VQConfig * _Nonnull)config idProvider:(id <VQIdProvider> _Nullable)idProvider reporter:(id <VQReporter> _Nullable)reporter;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
@property (nonatomic, readonly, copy) NSString * _Nullable varioqubId;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
- (void)fetchConfigWithCompletion:(void (^ _Nullable)(enum VQFetchStatus, NSError * _Nullable))callback;
- (void)activateConfigWithCompletion:(void (^ _Nullable)(void))callback;
- (void)activateConfigAndWait;
- (void)fetchAndActivateConfigWithCompletion:(void (^ _Nullable)(enum VQFetchStatus, NSError * _Nullable))callback;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
@property (nonatomic) BOOL sendEventOnChangeConfig;
@property (nonatomic, strong) VQClientFeatures * _Nonnull clientFeatures;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
- (void)setDefaults:(NSDictionary<NSString *, NSString *> * _Nonnull)defaults callback:(void (^ _Nullable)(void))callback;
- (void)setDefaultsAndWait:(NSDictionary<NSString *, NSString *> * _Nonnull)defaults;
- (void)loadXmlAt:(NSURL * _Nonnull)path completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (BOOL)loadXmlAndWaitAt:(NSURL * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
- (void)loadXmlFrom:(NSData * _Nonnull)data completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (BOOL)loadXmlAndWaitFrom:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
@property (nonatomic, readonly, copy) NSDictionary<NSString *, VQConfigValue *> * _Nonnull allItems;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull allKeys;
- (VQConfigValue * _Nonnull)getValueFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStringFor:(NSString * _Nonnull)flag defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStringFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleFor:(NSString * _Nonnull)flag defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (int64_t)getLongFor:(NSString * _Nonnull)flag defaultValue:(int64_t)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (int64_t)getLongFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolFor:(NSString * _Nonnull)flag defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef VARIOQUB_SWIFT_H
#define VARIOQUB_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Varioqub",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;

@interface NSError (SWIFT_EXTENSION(Varioqub))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CONFIG_FETCH_DOMAIN;)
+ (NSString * _Nonnull)CONFIG_FETCH_DOMAIN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_OTHER_CODE;)
+ (NSInteger)CONFIG_FETCH_OTHER_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_EMPTY_RESULT_CODE;)
+ (NSInteger)CONFIG_FETCH_EMPTY_RESULT_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_NULL_IDENTIFIER_CODE;)
+ (NSInteger)CONFIG_FETCH_NULL_IDENTIFIER_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_RESPONSE_ERROR_CODE;)
+ (NSInteger)CONFIG_FETCH_RESPONSE_ERROR_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_NETWORK_ERROR_CODE;)
+ (NSInteger)CONFIG_FETCH_NETWORK_ERROR_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CONFIG_FETCH_PARSE_ERROR_CODE;)
+ (NSInteger)CONFIG_FETCH_PARSE_ERROR_CODE SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC8Varioqub19VQActivateEventData")
@interface VQActivateEventData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8Varioqub16VQClientFeatures")
@interface VQClientFeatures : NSObject <NSCopying, NSMutableCopying>
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull features;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)clientFeaturesWith:(NSDictionary<NSString *, NSString *> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
@protocol VQSettingsProtocol;

SWIFT_CLASS("_TtC8Varioqub8VQConfig")
@interface VQConfig : NSObject
@property (nonatomic, copy) NSURL * _Nullable baseURL;
@property (nonatomic, strong) id <VQSettingsProtocol> _Nullable settings;
@property (nonatomic) NSTimeInterval fetchThrottle;
@property (nonatomic, strong) VQClientFeatures * _Nullable initialClientFeatures;
@property (nonatomic, strong) dispatch_queue_t _Nullable varioqubQueue;
@property (nonatomic, strong) dispatch_queue_t _Nonnull outputQueue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VQConfig * _Nonnull defaultConfig;)
+ (VQConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
@end


enum VQSource : NSInteger;
@class NSNumber;

SWIFT_CLASS("_TtC8Varioqub13VQConfigValue")
@interface VQConfigValue : NSObject
@property (nonatomic, readonly) enum VQSource source;
@property (nonatomic, readonly) int64_t testID;
@property (nonatomic, readonly, copy) NSString * _Nullable value;
@property (nonatomic, readonly, strong) NSNumber * _Nullable numberValue;
@property (nonatomic, readonly, copy) NSString * _Nullable stringValueOrDefault;
@property (nonatomic, readonly) NSInteger intValueOrDefault;
@property (nonatomic, readonly) NSInteger int64ValueOrDefault;
@property (nonatomic, readonly) BOOL boolValueOrDefault;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VQFetchStatus, open) {
  VQFetchStatusSuccess = 0,
  VQFetchStatusThrottled = 1,
  VQFetchStatusCached = 2,
  VQFetchStatusError = 3,
};


SWIFT_PROTOCOL("_TtP8Varioqub14VQNameProvider_")
@protocol VQNameProvider <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull varioqubName;
@end


SWIFT_PROTOCOL("_TtP8Varioqub12VQIdProvider_")
@protocol VQIdProvider <VQNameProvider>
- (void)fetchIdentifiersWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))completion;
@end

typedef SWIFT_ENUM(NSInteger, VQLogLevel, open) {
  VQLogLevelError = 0,
  VQLogLevelWarning = 1,
  VQLogLevelInfo = 2,
  VQLogLevelDebug = 3,
  VQLogLevelTrace = 4,
};


SWIFT_PROTOCOL("_TtP8Varioqub19VQLoggerDestination_")
@protocol VQLoggerDestination <NSObject>
- (BOOL)isAcceptedWithModule:(NSString * _Nonnull)module_ level:(enum VQLogLevel)level SWIFT_WARN_UNUSED_RESULT;
- (void)logWithModule:(NSString * _Nonnull)module_ level:(enum VQLogLevel)level message:(NSString * _Nonnull)message;
- (void)logWithModule:(NSString * _Nonnull)module_ level:(enum VQLogLevel)level error:(NSError * _Nonnull)error;
@end


SWIFT_CLASS("_TtC8Varioqub15VQLoggerFactory")
@interface VQLoggerFactory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Varioqub23VQMutableClientFeatures")
@interface VQMutableClientFeatures : VQClientFeatures
- (void)setFeature:(NSString * _Nonnull)feature forKey:(NSString * _Nonnull)key;
- (void)removeFeatureForKey:(NSString * _Nonnull)key;
- (void)mergeWith:(NSDictionary<NSString *, NSString *> * _Nonnull)other;
- (void)clearFeatures;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
@end


@class VQTestIDSet;

SWIFT_PROTOCOL("_TtP8Varioqub10VQReporter_")
@protocol VQReporter <VQNameProvider>
@optional
- (void)setExperiments:(NSString * _Nonnull)experiments;
- (void)setTriggeredTestIds:(VQTestIDSet * _Nonnull)testIds;
- (void)sendActivateEvent:(VQActivateEventData * _Nonnull)eventData;
@end

@class NSDate;
@class NSData;

SWIFT_PROTOCOL("_TtP8Varioqub18VQSettingsProtocol_")
@protocol VQSettingsProtocol <NSObject>
@property (nonatomic, copy) NSDate * _Nullable lastFetchDate;
@property (nonatomic) BOOL isShouldNotifyExperimentChanged;
@property (nonatomic, copy) NSString * _Nullable lastEtag;
@property (nonatomic, copy) NSData * _Nullable reporterData;
- (void)storeNetworkData:(NSData * _Nullable)data for:(NSString * _Nonnull)key;
- (NSData * _Nullable)loadNetworkDataFor:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, VQSource, open) {
  VQSourceDefaultValue = 0,
  VQSourceInappConfig = 1,
  VQSourceServer = 2,
};


SWIFT_CLASS("_TtC8Varioqub11VQTestIDSet")
@interface VQTestIDSet : NSObject
- (nonnull instancetype)initWithSet:(NSSet<NSNumber *> * _Nonnull)set OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithArray:(NSArray<NSNumber *> * _Nonnull)array OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull set;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC8Varioqub15VQTransferValue")
@interface VQTransferValue : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable value;
@property (nonatomic, readonly) int64_t testId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8Varioqub16VQVarioqubFacade")
@interface VQVarioqubFacade : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VQVarioqubFacade * _Nonnull sharedVarioqub;)
+ (VQVarioqubFacade * _Nonnull)sharedVarioqub SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
- (void)initializeWithClientId:(NSString * _Nonnull)clientId config:(VQConfig * _Nonnull)config idProvider:(id <VQIdProvider> _Nullable)idProvider reporter:(id <VQReporter> _Nullable)reporter;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
@property (nonatomic, readonly, copy) NSString * _Nullable varioqubId;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
- (void)fetchConfigWithCompletion:(void (^ _Nullable)(enum VQFetchStatus, NSError * _Nullable))callback;
- (void)activateConfigWithCompletion:(void (^ _Nullable)(void))callback;
- (void)activateConfigAndWait;
- (void)fetchAndActivateConfigWithCompletion:(void (^ _Nullable)(enum VQFetchStatus, NSError * _Nullable))callback;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
@property (nonatomic) BOOL sendEventOnChangeConfig;
@property (nonatomic, strong) VQClientFeatures * _Nonnull clientFeatures;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
- (void)setDefaults:(NSDictionary<NSString *, NSString *> * _Nonnull)defaults callback:(void (^ _Nullable)(void))callback;
- (void)setDefaultsAndWait:(NSDictionary<NSString *, NSString *> * _Nonnull)defaults;
- (void)loadXmlAt:(NSURL * _Nonnull)path completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (BOOL)loadXmlAndWaitAt:(NSURL * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
- (void)loadXmlFrom:(NSData * _Nonnull)data completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (BOOL)loadXmlAndWaitFrom:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
@end


@interface VQVarioqubFacade (SWIFT_EXTENSION(Varioqub))
@property (nonatomic, readonly, copy) NSDictionary<NSString *, VQConfigValue *> * _Nonnull allItems;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull allKeys;
- (VQConfigValue * _Nonnull)getValueFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStringFor:(NSString * _Nonnull)flag defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStringFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleFor:(NSString * _Nonnull)flag defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (int64_t)getLongFor:(NSString * _Nonnull)flag defaultValue:(int64_t)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (int64_t)getLongFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolFor:(NSString * _Nonnull)flag defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolFor:(NSString * _Nonnull)flag SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
