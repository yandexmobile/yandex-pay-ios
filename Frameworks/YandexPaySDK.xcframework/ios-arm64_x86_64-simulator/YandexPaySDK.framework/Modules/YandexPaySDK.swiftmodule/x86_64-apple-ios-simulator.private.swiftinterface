// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name YandexPaySDK
import AuthenticationServices
import Combine
import Darwin
import Foundation
import QuartzCore
import SafariServices
import Swift
import SwiftUI
import UIKit.UIFont
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension YandexPaySDK.YPCardNetwork : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ValidationError : Foundation.LocalizedError {
  case authenticationProblem
  case unknownMerchantOrigin
  case unknownMerchant
  case unknownGateway
  case insecureMerchantOrigin
  case amountLimitExceeded
  case invalidAmount
  case invalidCountry
  case invalidCurrency
  case amountMismatch
  case orderExpired
  case orderNotFound
  case unknownValidationProblem
  public static func == (a: YandexPaySDK.ValidationError, b: YandexPaySDK.ValidationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}


extension _Concurrency.Task : Combine.Cancellable {
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class FullscreenContainerController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public let contentViewController: UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
}
public struct YPDiscountBadgeModel {
  public let discountAmount: Foundation.Decimal
  public let size: YandexPaySDK.YPDiscountBadgeModel.Size
  public init(discountAmount: Foundation.Decimal, size: YandexPaySDK.YPDiscountBadgeModel.Size = .s, discountType: YandexPaySDK.YPDiscountBadgeModel.DiscountType = .constant)
}
extension YandexPaySDK.YPDiscountBadgeModel {
  public enum Size {
    case s
    case m
    case l
    public static func == (a: YandexPaySDK.YPDiscountBadgeModel.Size, b: YandexPaySDK.YPDiscountBadgeModel.Size) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DiscountType {
    case upTo
    case constant
    public static func == (a: YandexPaySDK.YPDiscountBadgeModel.DiscountType, b: YandexPaySDK.YPDiscountBadgeModel.DiscountType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
infix operator <=> : DefaultPrecedence

public struct RequiredShippingTypes : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol YPBankDataObserver : AnyObject {
  func observableEvent(_ event: any YandexPaySDK.YPBankEvent)
  func stateChanged(isNormal: Swift.Bool)
}
public struct YPBankCreditLimitApplicationResult {
  public let applicationID: Swift.String
  public let action: Foundation.URL
  public init(applicationID: Swift.String, action: Foundation.URL)
}
public protocol YPBankEvent {
}
public struct YPCreditLimitUpgradeEvent : YandexPaySDK.YPBankEvent {
  public let result: YandexPaySDK.YPCreditLimitUpgradeEvent.Result
  public let params: [Swift.String : Any]
  public init(result: YandexPaySDK.YPCreditLimitUpgradeEvent.Result, params: [Swift.String : Any])
}
extension YandexPaySDK.YPCreditLimitUpgradeEvent {
  public enum Result {
    case success
    case failure
    case canceled
    public static func == (a: YandexPaySDK.YPCreditLimitUpgradeEvent.Result, b: YandexPaySDK.YPCreditLimitUpgradeEvent.Result) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct YPDepositEvent : YandexPaySDK.YPBankEvent {
  public let result: YandexPaySDK.YPDepositEvent.Result
  public let params: [Swift.String : Any]
  public init(result: YandexPaySDK.YPDepositEvent.Result, params: [Swift.String : Any])
}
extension YandexPaySDK.YPDepositEvent {
  public enum Result {
    case succeededAft
    case failed
    case pending
    case succeededMe2Me
    case userTerminated
    case unknown
    public static func == (a: YandexPaySDK.YPDepositEvent.Result, b: YandexPaySDK.YPDepositEvent.Result) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct YPCreditLimitSettings {
  public let creditLimitSettings: YandexPaySDK.YPCreditLimitSettings.Settings
  public let matchingData: YandexPaySDK.YPCreditLimitSettings.SplitMatchingData
  public init(creditLimitSettings: YandexPaySDK.YPCreditLimitSettings.Settings, matchingData: YandexPaySDK.YPCreditLimitSettings.SplitMatchingData)
}
extension YandexPaySDK.YPCreditLimitSettings {
  public struct Settings {
    public let creditLengthInMonths: Swift.Int
    public init(creditLengthInMonths: Swift.Int)
  }
}
extension YandexPaySDK.YPCreditLimitSettings {
  public struct SplitMatchingData {
    public let purchaseTimestamp: Foundation.Date
    public let purchaseSum: YandexPaySDK.YPMoney
    public let cardID: Swift.String
    public let merchantID: Swift.String
    public let externalID: Swift.String
    public let orderID: Swift.String?
    public let splitID: Swift.String?
  }
}
public protocol YPBankService : YandexPaySDK.YPBankDataService, YandexPaySDK.YPBankNavigationService, YandexPaySDK.YPBankSplitPaymentService {
}
public protocol YPBankNavigationService {
  func handleAction(_ action: Foundation.URL, presentationHandler: UIKit.UIViewController, flowCompletionHandler: ((YandexPaySDK.YPBankFlowResult) -> Swift.Void)?)
  func topup(amount: YandexPaySDK.YPMoney?, presentationHandler: UIKit.UIViewController, flowCompletionHandler: ((YandexPaySDK.YPBankFlowResult) -> Swift.Void)?)
  func createCreditLimitApplication(originatingSystem: Swift.String?, merchantData: [Swift.String : Any], completion: @escaping (Swift.Result<YandexPaySDK.YPBankCreditLimitApplicationResult, any Swift.Error>) -> Swift.Void)
}
public protocol YPBankDataService {
  var isNormalAccount: Swift.Bool { get }
  #if compiler(>=5.3) && $AsyncAwait
  func loadCard() async -> Swift.Result<Swift.String?, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func fetchBalance() async -> Swift.Result<Foundation.Decimal, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func getCreditLimitPlanInfo(amount: YandexPaySDK.YPMoney, splitMerchantID: Swift.String) async -> Swift.Result<YandexPaySDK.YPSplitData, any Swift.Error>
  #endif
  func addObserver(_ observer: any YandexPaySDK.YPBankDataObserver)
  func notify(_ url: Foundation.URL) -> Swift.Bool
  func getActionForURL(_ url: Foundation.URL) -> Foundation.URL?
}
public protocol YPBankSplitPaymentService {
  #if compiler(>=5.3) && $AsyncAwait
  func setCreditLimitPurchaseSettings(settings: YandexPaySDK.YPCreditLimitSettings) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func setDefaultCreditPaymentMethod(selectedCardID: Swift.String, isYaBank: Swift.Bool, shouldContinuePolling: @escaping (Swift.Result<YandexPaySDK.YPCreditPaymentMethodStatusResult, any Swift.Error>) -> Swift.Bool) async throws
  #endif
}
public enum YPBankFlowResult {
  case userTerminated
  case unauthorized
  case unknown
  public static func == (a: YandexPaySDK.YPBankFlowResult, b: YandexPaySDK.YPBankFlowResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BankServiceError : Swift.Error {
  case missedCardID
  case missedPaymentID
  case setCreditPaymentMethodError
  case unknown
  public enum DefaultCard : Swift.Error {
    case missed3DS
    case failedPolling
    public static func == (a: YandexPaySDK.BankServiceError.DefaultCard, b: YandexPaySDK.BankServiceError.DefaultCard) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PaymentMethod : Swift.Error {
    case failed
    case empty
    public static func == (a: YandexPaySDK.BankServiceError.PaymentMethod, b: YandexPaySDK.BankServiceError.PaymentMethod) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func == (a: YandexPaySDK.BankServiceError, b: YandexPaySDK.BankServiceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YPCreditPaymentMethodStatusResult {
  public let status: YandexPaySDK.YPCreditPaymentMethodStatus
  public let url3DS: Foundation.URL?
  public init(status: YandexPaySDK.YPCreditPaymentMethodStatus, url3DS: Foundation.URL? = nil)
}
public enum YPCreditPaymentMethodStatus {
  case pending
  case required3DS
  case finished
  case failed
  public static func == (a: YandexPaySDK.YPCreditPaymentMethodStatus, b: YandexPaySDK.YPCreditPaymentMethodStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
public protocol YandexPayCheckoutButtonAsyncDelegate : AnyObject {
  func yandexPayCheckoutButton(_ button: any YandexPaySDK.YandexPayButton, didCompletePaymentWithResult result: YandexPaySDK.YPCheckoutResult)
  func yandexPayCheckoutButtonDidRequestViewControllerForPresentation(_ button: any YandexPaySDK.YandexPayButton) -> UIKit.UIViewController?
  func yandexPayCheckoutButtonDidRequestPaymentSheet(_ button: any YandexPaySDK.YandexPayButton, completion: @escaping (YandexPaySDK.YPCheckoutPaymentSheet?) -> Swift.Void)
}
public protocol YandexPayCheckoutButtonDelegate : AnyObject {
  func yandexPayCheckoutButton(_ button: any YandexPaySDK.YandexPayButton, didCompletePaymentWithResult result: YandexPaySDK.YPCheckoutResult)
  func yandexPayCheckoutButtonDidRequestViewControllerForPresentation(_ button: any YandexPaySDK.YandexPayButton) -> UIKit.UIViewController?
  func yandexPayCheckoutButtonDidRequestPaymentSheet(_ button: any YandexPaySDK.YandexPayButton) -> YandexPaySDK.YPCheckoutPaymentSheet?
}
public struct YPCheckoutError : Swift.Error {
  public let reason: Swift.String?
}
public struct YPCheckoutInfo {
  public let orderId: Swift.String
  public let metadata: Swift.String?
}
public enum YPCheckoutResult {
  case succeeded(YandexPaySDK.YPCheckoutInfo)
  case cancelled
  case failed(YandexPaySDK.YPCheckoutError)
}
public protocol YandexPayButtonAsyncDelegate : AnyObject {
  func yandexPayButton(_ button: any YandexPaySDK.YandexPayButton, didCompletePaymentWithResult result: YandexPaySDK.YPPaymentResult)
  func yandexPayButtonDidRequestViewControllerForPresentation(_ button: any YandexPaySDK.YandexPayButton) -> UIKit.UIViewController?
  func yandexPayButtonDidRequestPaymentSheet(_ button: any YandexPaySDK.YandexPayButton, completion: @escaping (YandexPaySDK.YPPaymentSheet?) -> Swift.Void)
}
public protocol YandexPayButtonSyncDelegate : AnyObject {
  func yandexPayButton(_ button: any YandexPaySDK.YandexPayButton, didCompletePaymentWithResult result: YandexPaySDK.YPPaymentResult)
  func yandexPayButtonDidRequestViewControllerForPresentation(_ button: any YandexPaySDK.YandexPayButton) -> UIKit.UIViewController?
  func yandexPayButtonDidRequestPaymentSheet(_ button: any YandexPaySDK.YandexPayButton) -> YandexPaySDK.YPPaymentSheet?
}
public protocol YandexPayButtonDelegate : AnyObject {
  func yandexPayButton(_ button: any YandexPaySDK.YandexPayButtonProtocol, didCompletePaymentWithResult result: YandexPaySDK.YPYandexPayPaymentResult, data: YandexPaySDK.YPYandexPayPaymentData)
}
public struct YPYandexPayPaymentData {
  public let orderId: Swift.String?
}
public protocol YandexPayFormDelegate : AnyObject {
  func yandexPayForm(_ form: any YandexPaySDK.YandexPayForm, data: YandexPaySDK.YPYandexPayPaymentData, didCompletePaymentWithResult result: YandexPaySDK.YPYandexPayPaymentResult)
}
public protocol YPPresentationContextProviding : AnyObject {
  func anchorForPresentation() -> YandexPaySDK.YPPresentationContext
}
@objc @_hasMissingDesignatedInitializers final public class YandexPaySDKApi : ObjectiveC.NSObject {
  final public func createTokenYandexPayForm(paymentSheet: YandexPaySDK.YPPaymentSheet, delegate: any YandexPaySDK.YandexPayTokenFormDelegate) -> any YandexPaySDK.YandexPayForm
  final public func createYandexPayForm(paymentURL: Swift.String, delegate: any YandexPaySDK.YandexPayFormDelegate) -> any YandexPaySDK.YandexPayForm
  final public func createButton(delegate: any YandexPaySDK.YandexPayButtonSyncDelegate) -> any YandexPaySDK.YandexPayButton
  final public func createButton(asyncDelegate: any YandexPaySDK.YandexPayButtonAsyncDelegate) -> any YandexPaySDK.YandexPayButton
  @available(*, deprecated, message: "Please, use new signature createButton(model:paymentDataProvider:presentationContextProvider:)")
  final public func createButton(dataSource: any YandexPaySDK.YandexPayButtonDataSource, delegate: any YandexPaySDK.YandexPayButtonDelegate) -> any YandexPaySDK.YandexPayButton
  final public func createButton(model: YandexPaySDK.YPButtonModel = .default, paymentDataProvider: any YandexPaySDK.YPButtonPaymentDataProviding, presentationContextProvider: any YandexPaySDK.YPButtonPresentationContextProviding, delegate: any YandexPaySDK.YandexPayButtonDelegate) -> any YandexPaySDK.YandexPayButton
  final public func createButton(model: YandexPaySDK.YPButtonModel, paymentDataProvider: any YandexPaySDK.YPButtonPaymentDataProviding, presentationContextProvider: any YandexPaySDK.YPButtonPresentationContextProviding, delegate: any YandexPaySDK.YandexPayButtonDelegate) -> some SwiftUI.View
  
  final public func createBadgeView(model: YandexPaySDK.YPBadgeModel) -> some SwiftUI.View
  
  final public func createBadgeView(model: YandexPaySDK.YPBadgeModel) -> UIKit.UIView
  final public func createItemWidgetView(model: YandexPaySDK.YPItemWidgetModel, presentationContextProvider: any YandexPaySDK.YPPresentationContextProviding) -> some SwiftUI.View
  
  final public func createItemWidgetView(model: YandexPaySDK.YPItemWidgetModel, presentationContextProvider: any YandexPaySDK.YPPresentationContextProviding) -> UIKit.UIView
  final public func createCheckoutWidgetView(model: YandexPaySDK.YPCheckoutWidgetModel) -> some SwiftUI.View
  
  final public func createCheckoutWidgetView(model: YandexPaySDK.YPCheckoutWidgetModel) -> UIKit.UIView
  final public func createCheckoutButton(delegate: any YandexPaySDK.YandexPayCheckoutButtonDelegate) -> any YandexPaySDK.YandexPayButton
  final public func createCheckoutButton(asyncDelegate: any YandexPaySDK.YandexPayCheckoutButtonAsyncDelegate) -> any YandexPaySDK.YandexPayButton
  @discardableResult
  @objc final public func applicationDidReceiveOpen(_ url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any]) -> Swift.Bool
  @discardableResult
  @objc final public func applicationDidReceiveUserActivity(_ userActivity: Foundation.NSUserActivity) -> Swift.Bool
  @objc deinit
}
extension YandexPaySDK.YandexPaySDKApi {
  @objc public static var instance: YandexPaySDK.YandexPaySDKApi {
    @objc get
  }
  @objc public static var isInitialized: Swift.Bool {
    @objc get
  }
  @objc public static let currentVersion: Swift.String
}
extension YandexPaySDK.YandexPaySDKApi {
  @objc(initializeWithConfiguration:error:) public static func initialize(configuration: YandexPaySDK.YandexPaySDKConfiguration) throws
}
@objc final public class YandexPaySDKConfiguration : ObjectiveC.NSObject {
  @objc final public let environment: YandexPaySDK.YandexPaySDKEnvironment
  @objc final public let merchant: YandexPaySDK.YandexPaySDKMerchant
  @objc final public let locale: YandexPaySDK.YandexPaySDKLocale
  @objc public init(environment: YandexPaySDK.YandexPaySDKEnvironment, merchant: YandexPaySDK.YandexPaySDKMerchant, locale: YandexPaySDK.YandexPaySDKLocale)
  @objc deinit
}
@objc public enum YandexPaySDKEnvironment : Swift.Int {
  case sandbox
  case production
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class YandexPaySDKMerchant : ObjectiveC.NSObject {
  @objc(merchantId) final public let id: Swift.String
  @objc final public let name: Swift.String
  @objc final public let url: Swift.String?
  @objc(initWithMerchantId:name:url:) public init(id: Swift.String, name: Swift.String, url: Swift.String?)
  @objc deinit
}
public enum ButtonPaymentType {
  case token
  case payment
  case checkout
  case custom(Swift.String)
}
extension YandexPaySDK.ButtonPaymentType : Swift.Equatable {
  public static func == (a: YandexPaySDK.ButtonPaymentType, b: YandexPaySDK.ButtonPaymentType) -> Swift.Bool
}
extension YandexPaySDK.ButtonPaymentType : Swift.LosslessStringConvertible {
  public init(_ description: Swift.String)
  public var description: Swift.String {
    get
  }
}
public struct YPButtonModel {
  public let amount: Foundation.Decimal?
  public let currency: YandexPaySDK.YPCurrencyCode
  public let preferredPaymentMethods: [YandexPaySDK.YPAvailablePaymentMethod]
  public let appearance: YandexPaySDK.YPTheme
  public let cornerRadius: CoreFoundation.CGFloat
  public let isLoading: Swift.Bool
  public let isBordered: Swift.Bool
  public init(amount: Foundation.Decimal?, currency: YandexPaySDK.YPCurrencyCode = .rub, preferredPaymentMethods: [YandexPaySDK.YPAvailablePaymentMethod] = [.card], appearance: YandexPaySDK.YPTheme = .system, cornerRadius: CoreFoundation.CGFloat = 16, isLoading: Swift.Bool = false, isBordered: Swift.Bool = false)
}
extension YandexPaySDK.YPButtonModel : Swift.Equatable {
  public static func == (a: YandexPaySDK.YPButtonModel, b: YandexPaySDK.YPButtonModel) -> Swift.Bool
}
extension YandexPaySDK.YPButtonModel {
  public static let `default`: YandexPaySDK.YPButtonModel
}
@_Concurrency.MainActor public protocol YandexPayButtonProtocol : AnyObject {
  @_Concurrency.MainActor var preferredPaymentMethods: [YandexPaySDK.YPAvailablePaymentMethod] { get set }
  @_Concurrency.MainActor var order: (Foundation.Decimal, YandexPaySDK.YPCurrencyCode)? { get set }
  @_Concurrency.MainActor var appearance: YandexPaySDK.YPTheme { get set }
  @_Concurrency.MainActor var isLoading: Swift.Bool { get set }
  @_Concurrency.MainActor var cornerRadius: CoreFoundation.CGFloat { get set }
  @_Concurrency.MainActor var isBordered: Swift.Bool { get set }
}
public protocol YandexPayButton : UIKit.UIView, YandexPaySDK.YandexPayButtonProtocol {
}
public protocol YPButtonPresentationContextProviding : AnyObject {
  func anchorForPresentation(for yandexPayButton: any YandexPaySDK.YandexPayButtonProtocol) -> YandexPaySDK.YPPresentationContext
}
public protocol YPButtonPaymentDataProviding : AnyObject {
  #if compiler(>=5.3) && $AsyncAwait
  func paymentUrl(for yandexPayButton: any YandexPaySDK.YandexPayButtonProtocol) async throws -> Swift.String
  #endif
}
public protocol YandexPayButtonDataSource : YandexPaySDK.YPButtonPaymentDataProviding, YandexPaySDK.YPButtonPresentationContextProviding {
  func viewControllerForPresentation(for yandexPayButton: any YandexPaySDK.YandexPayButtonProtocol) -> UIKit.UIViewController
}
extension YandexPaySDK.YandexPayButtonDataSource {
  public func anchorForPresentation(for yandexPayButton: any YandexPaySDK.YandexPayButtonProtocol) -> YandexPaySDK.YPPresentationContext
}
public enum YPPresentationContext {
  case viewController(UIKit.UIViewController)
  case window(UIKit.UIWindow)
  case keyWindow
}
public enum YPAdditionalField : Swift.Hashable {
  case comment
  case acceptCoupon
  public static func == (a: YandexPaySDK.YPAdditionalField, b: YandexPaySDK.YPAdditionalField) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum YPAuthMethod : Swift.Codable {
  case panOnly
  case cloudToken
  public static func == (a: YandexPaySDK.YPAuthMethod, b: YandexPaySDK.YPAuthMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct YPAuthorizationToken : Swift.Codable, Swift.Equatable {
  public init(value: Swift.String)
  public static func == (a: YandexPaySDK.YPAuthorizationToken, b: YandexPaySDK.YPAuthorizationToken) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum YPAvailablePaymentMethod : Swift.String {
  case card
  case split
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct YPBadgeModel {
  public let amount: Foundation.Decimal
  public let currency: YandexPaySDK.YPCurrencyCode
  public let theme: YandexPaySDK.YPTheme
  public let align: YandexPaySDK.YPBadgeModel.Align
  public let type: YandexPaySDK.YPBadgeModel.BadgeType
  public init(amount: Foundation.Decimal, currency: YandexPaySDK.YPCurrencyCode, theme: YandexPaySDK.YPTheme, align: YandexPaySDK.YPBadgeModel.Align, type: YandexPaySDK.YPBadgeModel.BadgeType)
}
extension YandexPaySDK.YPBadgeModel {
  public enum SplitVariant : Swift.String {
    case simple
    case detailed
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SplitColor : Swift.String {
    case primary
    case green
    case grey
    case transparent
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CashbackVariant : Swift.String {
    case `default`
    case compact
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CashbackColor : Swift.String {
    case primary
    case grey
    case transparent
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Align : Swift.String {
    case left
    case center
    case right
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum BadgeType {
    case split(color: YandexPaySDK.YPBadgeModel.SplitColor, variant: YandexPaySDK.YPBadgeModel.SplitVariant)
    case cashback(color: YandexPaySDK.YPBadgeModel.CashbackColor, variant: YandexPaySDK.YPBadgeModel.CashbackVariant)
  }
}
extension YandexPaySDK.YPBadgeModel : Swift.Equatable {
  public static func == (a: YandexPaySDK.YPBadgeModel, b: YandexPaySDK.YPBadgeModel) -> Swift.Bool
}
extension YandexPaySDK.YPBadgeModel.BadgeType : Swift.Equatable {
  public static func == (a: YandexPaySDK.YPBadgeModel.BadgeType, b: YandexPaySDK.YPBadgeModel.BadgeType) -> Swift.Bool
}
public struct YPBillingContact {
  public let email: Swift.String?
  public init(email: Swift.String?)
}
public enum YPCardNetwork {
  case americanExpress
  case discover
  case jcb
  case mastercard
  case visa
  case visaElectron
  case maestro
  case mir
  case unionPay
  case uzcard
  case humocard
  case unknown
  public static func == (a: YandexPaySDK.YPCardNetwork, b: YandexPaySDK.YPCardNetwork) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YPCardPaymentMethod : Swift.Codable {
  public let gateway: YandexPaySDK.YPGateway
  public let gatewayMerchantId: YandexPaySDK.YPGatewayMerchantID
  public let allowedAuthMethods: [YandexPaySDK.YPAuthMethod]
  public let allowedCardNetworks: [YandexPaySDK.YPCardNetwork]
  public let verificationDetails: Swift.Bool
  public init(gateway: YandexPaySDK.YPGateway, gatewayMerchantId: YandexPaySDK.YPGatewayMerchantID, allowedAuthMethods: [YandexPaySDK.YPAuthMethod], allowedCardNetworks: [YandexPaySDK.YPCardNetwork], verificationDetails: Swift.Bool = false)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct YPCardPaymentMethodInfo {
  public let cardLast4: Swift.String?
  public let cardNetwork: YandexPaySDK.YPCardNetwork?
  public init(cardLast4: Swift.String?, cardNetwork: YandexPaySDK.YPCardNetwork?)
}
public struct YPCheckoutWidgetModel {
  public enum Style : Swift.String {
    case cashbackOnly
    case splitOnly
    case fullBox
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Appearance {
    public var theme: YandexPaySDK.YPTheme
    public init(theme: YandexPaySDK.YPTheme = .system)
  }
  public let amount: Foundation.Decimal
  public let currency: YandexPaySDK.YPCurrencyCode
  public let style: YandexPaySDK.YPCheckoutWidgetModel.Style
  public let appearance: YandexPaySDK.YPCheckoutWidgetModel.Appearance
  public init(amount: Foundation.Decimal, currency: YandexPaySDK.YPCurrencyCode = .rub, style: YandexPaySDK.YPCheckoutWidgetModel.Style = .fullBox, appearance: YandexPaySDK.YPCheckoutWidgetModel.Appearance = .init())
}
extension YandexPaySDK.YPCheckoutWidgetModel : Swift.Equatable {
  public static func == (a: YandexPaySDK.YPCheckoutWidgetModel, b: YandexPaySDK.YPCheckoutWidgetModel) -> Swift.Bool
}
extension YandexPaySDK.YPCheckoutWidgetModel.Appearance : Swift.Equatable {
  public static func == (a: YandexPaySDK.YPCheckoutWidgetModel.Appearance, b: YandexPaySDK.YPCheckoutWidgetModel.Appearance) -> Swift.Bool
}
public enum YPCountryCode {
  case ru
  case us
  public static func == (a: YandexPaySDK.YPCountryCode, b: YandexPaySDK.YPCountryCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum YPCurrencyCode : Swift.String {
  case rub
  case byn
  case usd
  case eur
  case kzt
  case uah
  case amd
  case gel
  case azn
  case kgs
  case gbp
  case sek
  case pln
  case inr
  case czk
  case cad
  case brl
  case aud
  case uzs
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias YPGateway = Swift.String
public typealias YPGatewayMerchantID = Swift.String
public struct YPItemWidgetModel {
  public enum Style : Swift.String {
    case split
    case cashback
    case fullSize
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Appearance {
    public var theme: YandexPaySDK.YPTheme
    public var isTransparent: Swift.Bool
    public init(theme: YandexPaySDK.YPTheme = .system, isTransparent: Swift.Bool = false)
  }
  public let amount: Foundation.Decimal
  public let currency: YandexPaySDK.YPCurrencyCode
  public let style: YandexPaySDK.YPItemWidgetModel.Style
  public let appearance: YandexPaySDK.YPItemWidgetModel.Appearance
  public init(amount: Foundation.Decimal, currency: YandexPaySDK.YPCurrencyCode = .rub, style: YandexPaySDK.YPItemWidgetModel.Style = .fullSize, appearance: YandexPaySDK.YPItemWidgetModel.Appearance = .init())
}
extension YandexPaySDK.YPItemWidgetModel : Swift.Equatable {
  public static func == (a: YandexPaySDK.YPItemWidgetModel, b: YandexPaySDK.YPItemWidgetModel) -> Swift.Bool
}
extension YandexPaySDK.YPItemWidgetModel.Appearance : Swift.Equatable {
  public static func == (a: YandexPaySDK.YPItemWidgetModel.Appearance, b: YandexPaySDK.YPItemWidgetModel.Appearance) -> Swift.Bool
}
public typealias YPMerchantID = Swift.String
public struct YPMetadata {
  public let value: Swift.String
  public init(value: Swift.String)
}
public struct YPMoney : Swift.Equatable {
  public var amount: Foundation.Decimal
  public var currencyCode: Swift.String
  public init(amount: Foundation.Decimal, currencyCode: Swift.String)
  public static func == (a: YandexPaySDK.YPMoney, b: YandexPaySDK.YPMoney) -> Swift.Bool
}
extension YandexPaySDK.YPMoney {
  public static func rub(amount: Foundation.Decimal) -> YandexPaySDK.YPMoney
}
public struct YPOrder : Swift.Codable {
  public let id: YandexPaySDK.YPOrderID
  public let label: Swift.String?
  public let amount: Foundation.Decimal
  public let items: [YandexPaySDK.YPOrderItem]?
  public init(id: YandexPaySDK.YPOrderID, label: Swift.String? = nil, amount: Foundation.Decimal, items: [YandexPaySDK.YPOrderItem]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias YPOrderID = Swift.String
public struct YPOrderItem : Swift.Codable {
  public let type: YandexPaySDK.YPOrderItemType?
  public let label: Swift.String
  public let amount: Foundation.Decimal
  public let quantity: YandexPaySDK.YPOrderItemQuantity?
  public init(type: YandexPaySDK.YPOrderItemType? = nil, label: Swift.String, amount: Foundation.Decimal, quantity: YandexPaySDK.YPOrderItemQuantity? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct YPOrderItemQuantity : Swift.Codable {
  public let label: Swift.String?
  public let count: Swift.Int
  public init(label: Swift.String? = nil, count: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum YPOrderItemType : Swift.Codable {
  case pickup
  case shipping
  case discount
  case promocode
  public static func == (a: YandexPaySDK.YPOrderItemType, b: YandexPaySDK.YPOrderItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct YPPaymentCart {
  public init(items: [YandexPaySDK.YPProduct])
}
public struct YPProduct {
  public let id: Swift.String
  public let total: Foundation.Decimal
  public let quantity: YandexPaySDK.YPQuantity?
  public init(id: Swift.String, total: Foundation.Decimal, quantity: YandexPaySDK.YPQuantity?)
}
public struct YPQuantity {
  public init(count: Swift.String)
}
public enum YPPaymentError : Swift.Error {
  case authenticationProblem
  case wrongMerchantId
  case orderExpired
  case paymentFailed
  case appError
  case invalidArgs
  case orderNotFound
  case unknownError
  public static func == (a: YandexPaySDK.YPPaymentError, b: YandexPaySDK.YPPaymentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YPPaymentInfo {
  public let paymentToken: YandexPaySDK.YPPaymentToken
  public let paymentMethodInfo: YandexPaySDK.YPPaymentMethodInfo
  public let paymentAmount: Foundation.Decimal
  public let billingContact: YandexPaySDK.YPBillingContact?
  public init(paymentToken: YandexPaySDK.YPPaymentToken, paymentMethodInfo: YandexPaySDK.YPPaymentMethodInfo, paymentAmount: Foundation.Decimal, billingContact: YandexPaySDK.YPBillingContact?)
}
public enum YPPaymentMethod : Swift.Codable {
  case card(YandexPaySDK.YPCardPaymentMethod)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum YPPaymentMethodInfo {
  case card(YandexPaySDK.YPCardPaymentMethodInfo)
}
public enum YPPaymentResult {
  case succeeded(YandexPaySDK.YPPaymentInfo)
  case cancelled
  case failed(YandexPaySDK.YPPaymentError)
}
public enum YPYandexPayPaymentResult {
  case succeeded
  case cancelled
  case failed(YandexPaySDK.YPPaymentError)
}
public struct YPPaymentSheet {
  public let countryCode: YandexPaySDK.YPCountryCode
  public let currencyCode: YandexPaySDK.YPCurrencyCode
  public let order: YandexPaySDK.YPOrder
  public let paymentMethods: [YandexPaySDK.YPPaymentMethod]
  public let additionalFields: Swift.Set<YandexPaySDK.YPAdditionalField>
  public let requiredFields: Swift.Set<YandexPaySDK.YPRequiredField>
  public init(countryCode: YandexPaySDK.YPCountryCode, currencyCode: YandexPaySDK.YPCurrencyCode, order: YandexPaySDK.YPOrder, paymentMethods: [YandexPaySDK.YPPaymentMethod], additionalFields: Swift.Set<YandexPaySDK.YPAdditionalField> = [], requiredFields: Swift.Set<YandexPaySDK.YPRequiredField> = [])
}
public struct YPCheckoutPaymentSheet {
  public let currencyCode: YandexPaySDK.YPCurrencyCode
  public let cart: YandexPaySDK.YPPaymentCart
  public let orderId: YandexPaySDK.YPOrderID?
  public let metadata: YandexPaySDK.YPMetadata?
  public init(currencyCode: YandexPaySDK.YPCurrencyCode, cart: YandexPaySDK.YPPaymentCart, orderId: YandexPaySDK.YPOrderID?, metadata: YandexPaySDK.YPMetadata?)
}
public typealias YPPaymentToken = Swift.String
public enum YPRequiredField : Swift.Hashable {
  case billingContactEmail
  case billingContactName
  case shippingContactEmail
  case shippingContactName
  case shippingContactPhone
  case directShippingType
  case pickupShippingType
  public static func == (a: YandexPaySDK.YPRequiredField, b: YandexPaySDK.YPRequiredField) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YPSplitData {
  public let defaultPlan: Swift.String
  public let plans: [YandexPaySDK.YPSplitPlan]
  public let upgradeStatus: YandexPaySDK.YPSplitUpgradeStatus
  public let splitCardID: Swift.String?
  public let upgradedSplitDocuments: YandexPaySDK.YPDocument?
  public var defaultPaymentMethod: YandexPaySDK.YPSplitPaymentMethod?
  public init(defaultPlan: Swift.String, plans: [YandexPaySDK.YPSplitPlan], upgradeStatus: YandexPaySDK.YPSplitUpgradeStatus, splitCardID: Swift.String? = nil, upgradedSplitDocuments: YandexPaySDK.YPDocument? = nil, defaultPaymentMethod: YandexPaySDK.YPSplitPaymentMethod?)
}
extension YandexPaySDK.YPSplitData {
  public static let empty: YandexPaySDK.YPSplitData
}
public struct YPSplitPlan {
  public let id: Swift.String
  public let productType: Swift.String
  public let constructor: Swift.String
  public let sum: Foundation.Decimal
  public let visualProperties: YandexPaySDK.YPSplitVisualProperties
  public let payments: [YandexPaySDK.YPSplitPayment]
  public let annotation: YandexPaySDK.YPSplitPlanAnnotation
  public let needUpgrade: Swift.Bool
  public let creditLengthInMonths: Swift.Int?
  public init(id: Swift.String, productType: Swift.String, constructor: Swift.String, sum: Foundation.Decimal, visualProperties: YandexPaySDK.YPSplitVisualProperties, payments: [YandexPaySDK.YPSplitPayment], annotation: YandexPaySDK.YPSplitPlanAnnotation, needUpgrade: Swift.Bool, creditLengthInMonths: Swift.Int? = nil)
}
public enum YPSplitUpgradeStatus {
  case upgraded
  case showUpgrade
  case dontShowUpgrade
  public static func == (a: YandexPaySDK.YPSplitUpgradeStatus, b: YandexPaySDK.YPSplitUpgradeStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YPDocument {
  public let urls: [Foundation.URL]
  public let text: Swift.String
  public let actions: [Foundation.NSRange : YandexPaySDK.YPDocumentAction]
  public init(urls: [Foundation.URL], text: Swift.String, actions: [Foundation.NSRange : YandexPaySDK.YPDocumentAction])
}
public enum YPDocumentAction {
  case link(url: Foundation.URL)
  case custom(actionKey: Swift.String)
}
public struct YPSplitVisualProperties {
  public let title: Swift.String
  public let shortTitle: Swift.String
  public let nextDatesDescription: Swift.String
  public let nextPaymentDescription: Swift.String
  public init(title: Swift.String, shortTitle: Swift.String, nextDatesDescription: Swift.String, nextPaymentDescription: Swift.String)
}
public struct YPSplitPayment {
  public let status: Swift.String?
  public let amount: Foundation.Decimal
  public let dateTime: Swift.String
  public init(status: Swift.String?, amount: Foundation.Decimal, dateTime: Swift.String)
}
public struct YPSplitPlanAnnotation {
  public let payment: Foundation.Decimal
  public let loan: Foundation.Decimal
  public let fee: Foundation.Decimal
  public init(payment: Foundation.Decimal, loan: Foundation.Decimal, fee: Foundation.Decimal)
}
public enum YPSplitPaymentMethod {
  case yaBankCard
  case card(id: Swift.String)
  public init(trustCardID: Swift.String?)
}
public enum YPTheme : Swift.String {
  case light
  case dark
  case system
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol YandexPayForm : AnyObject {
  func present(from anchor: YandexPaySDK.YPPresentationContext, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  func present(from presenter: any YandexPaySDK.YandexPayFormPresenter, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  func dismiss(animated: Swift.Bool, completion: (() -> Swift.Void)?)
}
extension YandexPaySDK.YandexPayForm {
  public func present(from anchor: YandexPaySDK.YPPresentationContext, animated: Swift.Bool, completion: (() -> Swift.Void)?)
}
public protocol YandexPayFormPresenter : AnyObject {
  func present(_ controller: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
}
extension UIKit.UIViewController : YandexPaySDK.YandexPayFormPresenter {
}
public protocol YandexPayTokenFormDelegate : AnyObject {
  func yandexPayForm(_ from: any YandexPaySDK.YandexPayForm, didCompletePaymentWithResult result: YandexPaySDK.YPPaymentResult)
  func yandexPayFormDidHandleRelogin(_ form: any YandexPaySDK.YandexPayForm)
}
public protocol NavigationControllerFactory {
  func callAsFunction() -> UIKit.UINavigationController
}
public enum YPAuthError : Swift.Error {
  case reloginRecoverable
  public static func == (a: YandexPaySDK.YPAuthError, b: YandexPaySDK.YPAuthError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YandexPaySDKPaymentDeeplinkParams {
  public let merchantId: Swift.String
  public let clientId: Swift.String?
  public let sessionId: Swift.String
  public let paymentURL: Swift.String
  public let environment: YandexPaySDK.YandexPaySDKEnvironment
  public let redirectWebOnly: Swift.Bool
}
@objc public enum YandexPaySDKLocale : Swift.Int {
  case ru
  case en
  case system
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension YandexPaySDK.YPCardNetwork : Swift.Equatable {}
extension YandexPaySDK.YPCardNetwork : Swift.Hashable {}
extension YandexPaySDK.ValidationError : Swift.Equatable {}
extension YandexPaySDK.ValidationError : Swift.Hashable {}
extension YandexPaySDK.YPAuthMethod : Swift.Equatable {}
extension YandexPaySDK.YPAuthMethod : Swift.Hashable {}
extension YandexPaySDK.YPCountryCode : Swift.Equatable {}
extension YandexPaySDK.YPCountryCode : Swift.Hashable {}
extension YandexPaySDK.YPCurrencyCode : Swift.Equatable {}
extension YandexPaySDK.YPCurrencyCode : Swift.Hashable {}
extension YandexPaySDK.YPCurrencyCode : Swift.RawRepresentable {}
extension YandexPaySDK.YPPaymentError : Swift.Equatable {}
extension YandexPaySDK.YPPaymentError : Swift.Hashable {}
extension YandexPaySDK.YPDiscountBadgeModel.Size : Swift.Equatable {}
extension YandexPaySDK.YPDiscountBadgeModel.Size : Swift.Hashable {}
extension YandexPaySDK.YPDiscountBadgeModel.DiscountType : Swift.Equatable {}
extension YandexPaySDK.YPDiscountBadgeModel.DiscountType : Swift.Hashable {}
extension YandexPaySDK.YandexPaySDKEnvironment : Swift.Equatable {}
extension YandexPaySDK.YandexPaySDKEnvironment : Swift.Hashable {}
extension YandexPaySDK.YandexPaySDKEnvironment : Swift.RawRepresentable {}
extension YandexPaySDK.YPBadgeModel.CashbackVariant : Swift.Equatable {}
extension YandexPaySDK.YPBadgeModel.CashbackVariant : Swift.Hashable {}
extension YandexPaySDK.YPBadgeModel.CashbackVariant : Swift.RawRepresentable {}
extension YandexPaySDK.YPBadgeModel.SplitVariant : Swift.Equatable {}
extension YandexPaySDK.YPBadgeModel.SplitVariant : Swift.Hashable {}
extension YandexPaySDK.YPBadgeModel.SplitVariant : Swift.RawRepresentable {}
extension YandexPaySDK.YPBadgeModel.Align : Swift.Equatable {}
extension YandexPaySDK.YPBadgeModel.Align : Swift.Hashable {}
extension YandexPaySDK.YPBadgeModel.Align : Swift.RawRepresentable {}
extension YandexPaySDK.YPOrderItemType : Swift.Equatable {}
extension YandexPaySDK.YPOrderItemType : Swift.Hashable {}
extension YandexPaySDK.YandexPaySDKLocale : Swift.Equatable {}
extension YandexPaySDK.YandexPaySDKLocale : Swift.Hashable {}
extension YandexPaySDK.YandexPaySDKLocale : Swift.RawRepresentable {}
extension YandexPaySDK.YPCreditLimitUpgradeEvent.Result : Swift.Equatable {}
extension YandexPaySDK.YPCreditLimitUpgradeEvent.Result : Swift.Hashable {}
extension YandexPaySDK.YPDepositEvent.Result : Swift.Equatable {}
extension YandexPaySDK.YPDepositEvent.Result : Swift.Hashable {}
extension YandexPaySDK.YPBankFlowResult : Swift.Equatable {}
extension YandexPaySDK.YPBankFlowResult : Swift.Hashable {}
extension YandexPaySDK.BankServiceError : Swift.Equatable {}
extension YandexPaySDK.BankServiceError : Swift.Hashable {}
extension YandexPaySDK.BankServiceError.DefaultCard : Swift.Equatable {}
extension YandexPaySDK.BankServiceError.DefaultCard : Swift.Hashable {}
extension YandexPaySDK.BankServiceError.PaymentMethod : Swift.Equatable {}
extension YandexPaySDK.BankServiceError.PaymentMethod : Swift.Hashable {}
extension YandexPaySDK.YPCreditPaymentMethodStatus : Swift.Equatable {}
extension YandexPaySDK.YPCreditPaymentMethodStatus : Swift.Hashable {}
extension YandexPaySDK.YPAvailablePaymentMethod : Swift.Equatable {}
extension YandexPaySDK.YPAvailablePaymentMethod : Swift.Hashable {}
extension YandexPaySDK.YPAvailablePaymentMethod : Swift.RawRepresentable {}
extension YandexPaySDK.YPBadgeModel.SplitColor : Swift.Equatable {}
extension YandexPaySDK.YPBadgeModel.SplitColor : Swift.Hashable {}
extension YandexPaySDK.YPBadgeModel.SplitColor : Swift.RawRepresentable {}
extension YandexPaySDK.YPBadgeModel.CashbackColor : Swift.Equatable {}
extension YandexPaySDK.YPBadgeModel.CashbackColor : Swift.Hashable {}
extension YandexPaySDK.YPBadgeModel.CashbackColor : Swift.RawRepresentable {}
extension YandexPaySDK.YPCheckoutWidgetModel.Style : Swift.Equatable {}
extension YandexPaySDK.YPCheckoutWidgetModel.Style : Swift.Hashable {}
extension YandexPaySDK.YPCheckoutWidgetModel.Style : Swift.RawRepresentable {}
extension YandexPaySDK.YPItemWidgetModel.Style : Swift.Equatable {}
extension YandexPaySDK.YPItemWidgetModel.Style : Swift.Hashable {}
extension YandexPaySDK.YPItemWidgetModel.Style : Swift.RawRepresentable {}
extension YandexPaySDK.YPSplitUpgradeStatus : Swift.Equatable {}
extension YandexPaySDK.YPSplitUpgradeStatus : Swift.Hashable {}
extension YandexPaySDK.YPTheme : Swift.Equatable {}
extension YandexPaySDK.YPTheme : Swift.Hashable {}
extension YandexPaySDK.YPTheme : Swift.RawRepresentable {}
extension YandexPaySDK.YPAuthError : Swift.Equatable {}
extension YandexPaySDK.YPAuthError : Swift.Hashable {}
